<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>Node js Express Tutorial</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/bootstrap.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>
  <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
    crossorigin="anonymous"></script>
  <style>ul {
      list-style-type: none;
      margin: 0px;
      padding: 0px;
    }
    p{
      color:lightgrey;
      margin: 0px;
      padding: 0px;

    }
  

    .col-xs-4{
      margin: 0px;
      padding: 0px;

    }
    
    
    </style>
</head>

<body onload="sortTable()">
  <div class="container">
    <h1>Juuksuri päevakava</h1>
    
      <br>


      <table id="myTable" class="table table-striped">
        <thead>
          <tr>
            <td><b>Kell</b></td>
            <td><b>kliendi nimi ja teenuse nimetus</b></td>

            <td colspan="2"><b>Action</b> </td>

    
    </tr>
    </thead>
    <tbody>
     

    </tbody>
    </table>




    <form method="post" action="/coins/post">

      <div class="form-group">
        <label for="item">Vali kellaaeg</label>
        <!-- <input type="number" step="0.01" class="form-control" id="price" name="price"> -->
        <select id="options" class="form-control" id="price" name="price" required>




          <option value="" selected disabled hidden>Vali kellaaeg</option>

          <%
          let newArray=[];
          for ( var i = 0; i < coins.length; i++ ){
            newArray.push(coins[i].price);

          }
          
            var options = [ "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00" ];
           
            for ( var i = 0; i < options.length; i++ ){
            
                options = options.filter( function( el ) {
                
                  return newArray.indexOf( el ) < 0;
                 
                } );
            
      }
            %>
          <%   
            for ( var i = 0; i < options.length; i++ ){  
             
              %>
          <option value="<%=options[i] %>">
            <%=options[i] %>
          </option>
          <% }   %>


        </select>

      </div>
      <div class="form-group">
        <label for="item">Kliendi nimi ja teenuse nimetus</label>
        <input id="service" placeholder="Info" type="text" class="form-control" id="name" name="name" required>
      </div>
      <button id="juuksur" type="submit" class="btn btn-success active">Salvesta</button>
    </form>


    <div id="status"></div>


    <div class="col-xs-4">
      <h3>Chat</h3>
      <input type="text" maxlength="20" class="form-control" id="username" placeholder="Sisesta oma nimi" required>
      <br>
      <input type="text" class="form-control" placeholder="Ütle midagi" id="txt" required>

      <br> <button id="send" class="btn btn-info">Saada</button>
      <ul id="messages"></ul>
      <p class="notification"></p>
      <p id="myList"></p>
      <!-- <span> <a href="/coins/create %>" class="btn btn-success active" style="width:200px;margin-top:10px;">Create</a></span> -->

    </div>






  </div>

  <!-- Vaja on tekstivälja, nuppu ning ühte elementi veel, kuhu sõnumid tekitada -->

  <script>
   function sortTable() {
  var table, rows, switching, i, x, y, shouldSwitch;
  table = document.getElementById("myTable");
  switching = true;
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i < (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName("TD")[0];
      y = rows[i + 1].getElementsByTagName("TD")[0];
      //check if the two rows should switch place:
      if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
        //if so, mark as a switch and break the loop:
        shouldSwitch = true;
        break;
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
    }
  }
}


    $(() => {
      $("#juuksur").click(() => {
        // sendMessage({
        //   price: $("#txt").val(),
        //   username: $("#username").val()
        // });
      })
      getMessages()
    })

    function addMessages(message) {
     // console.log(message);
      if (message.price) {
       // console.log("added:" + message._id);
        $('#myTable').append('<tr id="' + message._id + '"> <td> ' + message.price + '</td> <td> ' + message.name + ' </td>' +
          ' <td><a href="/coins/edit/' + message._id + '" class="btn btn-primary">Edit</a></td>' +
          '<td><a href="/coins/delete/' + message._id + '" class="btn btn-danger">Delete</a></td>)</tr>')
      }
      

      else {
        //console.log("removed:" + message);
       // if ($(this).find('tr').length) $(this).remove();

      };sortTable();
      
    }
    function getMessages() {
      $.get('http://localhost:3000/coins/messages', (data) => {
        data.forEach(addMessages);sortTable();
      })
    }
    // function sendMessage(message) {
    //   $.post('http://localhost:3000/coins/messages', message)
    // }



    function removeMessages(message) {
  //   console.log( message);
     
       
        //if ($(this).find('tr').length) $(this).remove();
        $('#'+message).remove();sortTable();
     
      
    }

    function changeMessages(message) {
  //   console.log("update tehtud "+ message.params.id);
          
        //if ($(this).find('tr').length) $(this).remove();
        $('#'+message.params.id).remove();
        $('#myTable').append('<tr id="' + message.params.id + '"> <td> ' + message.body.price + '</td> <td> ' + message.body.name + ' </td>' +
          ' <td><a href="/coins/edit/' + message.params.id + '" class="btn btn-primary">Edit</a></td>' +
          '<td><a href="/coins/delete/' + message.params.id + '" class="btn btn-danger">Delete</a></td>)</tr>');
          sortTable();

    }

    


    var socket = io();

    socket.on('message', addMessages);
    socket.on('remove', removeMessages);
    socket.on('change', changeMessages);

    table = document.getElementById("myTable");
    var time = document.getElementById('options');
    // elemendid muutujatesse
    var chat = document.getElementById("messages");
    var txt = document.getElementById("txt");
    var sendBtn = document.getElementById("send");
    var username = document.getElementById("username");
    var status = document.getElementById('status');
    var service = document.getElementById('service');

    var statusDefault = status.textContent;
    //console.log(statusDefault);
    var setStatus = function (s) {
      // Set status
      status.textContent = s;

      if (s !== statusDefault) {
        var delay = setTimeout(function () {
          setStatus(statusDefault);
        }, 4000);
      }
    }














//Chati osa, mida ilmselt kustutan


    // Get Status From Server
    // see osa kahjuks ei tööta, aga minu teises nodejs rakenduses töötas. See annab teada kasutajale, et nii nime kui ka sõnumi väljad peavad olema täidetud
    socket.on('status', function (data) {
      // get message status
      setStatus((typeof data === 'object') ? data.message : data);

      // If status is clear, clear text
      if (data.clear) {
        service.value = '';
      }
    });



    //INPUT
    sendBtn.addEventListener("click", function (e) {
      // saadab teate nimega "input" serverisse, selle peame serveri pool vastu võtma, et kõikidele klientidele edastada
      // socket.emit('input', {
      //   price: options.value,
      //   name: service.value

      // });
      document.getElementById("txt").focus();

      socket.emit('input', { txt: txt.value, username: username.value });
      // tekstivälja sisu tühjaks
      txt.value = "";




    });




    // selle funktsiooni abil võtma serveri poolt vastu teateid nimega 'chat'
    //OUTPUT
    socket.on('chat', function (msg) {

      if (msg.length) {
        for (var i = 0; i < msg.length; i++) {

          //chat.innerHTML += '<li>' + msg[i].username + ": " + msg[i].txt + '</li>';
          //chat.insertAdjacentElement('beforebegin', '<li>' + msg[i].username + ": " + msg[i].txt + '</li>');

          var node = document.createElement("li");
          var textnode = document.createTextNode(msg[i].username + ": " + msg[i].txt);
          node.appendChild(textnode);
          var list = chat;
          list.insertBefore(node, list.childNodes[0]);


        }

      };

      //var insertedRows = [];


      // Object.keys(msg).forEach(function (key) {
      //   console.log(msg[key]);
      //   insertedRows.push(msg[key]);
      //   var row = table.insertRow();
      //   var cell1 = row.insertCell(0);
      //   var cell2 = row.insertCell(1);
      //   cell1.innerHTML = msg[key];
      // });

      // for (var x = 0; x < insertedRows.length; x++) {
      //   console.log(msg[x].price);

      //   var row = table.insertRow();
      //   var cell1 = row.insertCell(0);
      //   var cell2 = row.insertCell(1);
      //   cell1.innerHTML = msg[x].price;
      // }

      // ning lisame saadud teate kõikide teiste teadete hulka
      // chat.innerHTML += '<li>' + msg + '</li>';



    });

    socket.on('broadcast', function (data) {
      var node = document.createElement("p");
      var textnode = document.createTextNode(data.description);
      node.className = "grayedout";
      node.appendChild(textnode);
      var list = chat;
      list.insertBefore(node, list.childNodes[0]);
    });



  </script>




</body>

</html>